- name: Gather snapshot info from AWS
  amazon.aws.ec2_snapshot_info:
    filters:
      owner-id: "{{ aws_account_id }}"
      "tag:createdby": ansible
    profile: "{{ aws_auth_profile }}"
    region: "{{ aws_region }}"
  register: snapshot_lookup_results
  delegate_to: localhost

- name: Determine the most recent snapshot created by this script
  set_fact:
    latest_snapshot: "{{ snapshot_lookup_results.snapshots | sort(attribute='start_time', reverse=true) | first }}"

- name: Fail if progress is not 100% on the snapshot
  ansible.builtin.fail:
    msg: >
      Snapshot creation progress for snapshot {{ latest_snapshot.snapshot_id }} is not at 100%.
      Actual progress: {{ latest_snapshot.progress }}.
  when: latest_snapshot.progress != "100%"

- name: Create new volume from snapshot {{ latest_snapshot.snapshot_id }}
  # Creates a new EBS volume based on the snapshot.
  # The size can be increased here if `new_volume_size_gb` is set.
  amazon.aws.ec2_vol:
    snapshot: "{{ latest_snapshot.snapshot_id }}"
    region: "{{ aws_region }}"
    zone: "{{ aws_zone }}"
    volume_type: "{{ new_volume_type }}"
    # size: "{{ new_volume_size_gb if new_volume_size_gb > 0 else omit }}" # Omit size if 0 to keep original
    profile: "{{ aws_auth_profile }}"
    tags:
      Name: "{{ new_pg_container_name }}-data-volume"
      Project: "PostgresMigration"
    state: present
  register: new_volume_result # Stores the new volume details
  delegate_to: localhost

# - name: Delete the snapshot ({{ new_volume_result.snapshot_id }}) after volume creation
#   # This task removes the EBS snapshot immediately after a new volume has been successfully
#   # created from it. It relies on the 'new_volume_result' variable which should be
#   # registered from the 'Create new volume from snapshot' task.
#   #
#   # CAUTION: Deleting snapshots means you lose that specific point-in-time recovery point.
#   # Ensure this is the desired behavior for your workflow.
#   amazon.aws.ec2_snapshot:
#     snapshot_id: "{{ new_volume_result.snapshot_id }}"
#     region: "{{ aws_region }}"
#     state: absent
#   delegate_to: localhost
#   # ensures this task only runs if the 'new_volume_result'
#   # variable (from the volume creation task) contains a valid snapshot ID.
#   when: new_volume_result.snapshot_id is defined and new_volume_result.snapshot_id != ''

- name: Attach new volume {{ new_volume_result.volume_id }} to instance {{ target_instance_id }} as {{ source_device_disk }}
  # Attaches the newly created volume to the target EC2 instance.
  amazon.aws.ec2_vol:
    instance: "{{ target_instance_id }}"
    id: "{{ new_volume_result.volume_id }}"
    device_name: "{{ source_device_disk }}" # Use the same device name or a new one
    region: "{{ aws_region }}"
    profile: "{{ aws_auth_profile }}"
    state: present
  register: attach_volume_result
  delegate_to: localhost

- name: Wait for the new device to be available on the host
  # Waits until the kernel recognizes the newly attached device.
  ansible.builtin.wait_for:
    path: "{{ source_device_partition }}" # This path needs to be the kernel's device path (e.g., /dev/xvdf)
    timeout: 60
    msg: "New device {{ source_device_partition }} did not appear within 60 seconds."

- name: Create mount point directory ({{ mount_point }}) if it doesn't exist
  # Ensures the directory where the volume will be mounted exists.
  ansible.builtin.file:
    path: "{{ mount_point }}"
    state: directory
    mode: '0755'


# - name: Unmount and delete old volume ({{ source_volume_id }})
#   # CAUTION: This step permanently deletes your old volume.
#   # ONLY run this AFTER you have thoroughly verified that the new PostgreSQL
#   # instance is fully functional and data is correct.
#   # Consider commenting this out or running it manually after verification.
#   amazon.aws.ec2_vol:
#     id: "{{ source_volume_id }}"
#     region: "{{ aws_region }}"
#     state: absent
#   delegate_to: localhost
#   #only delete if the new container was started and the PostgreSQL verification command succeeded.
#   when: new_pg_container_start.changed and pg_check_result.rc == 0

# - name: Delete the snapshot ({{ snapshot_result.snapshot_id }})
#   # CAUTION: This step permanently deletes the snapshot.
#   # Keep the snapshot as a recovery point until you are absolutely certain
#   # the new setup is stable and you no longer need it.
#   amazon.aws.ec2_snapshot:
#     snapshot_id: "{{ snapshot_result.snapshot_id }}"
#     region: "{{ aws_region }}"
#     state: absent
#   delegate_to: localhost
#   # only delete if the new container was started and the PostgreSQL verification command succeeded.
#   when: new_pg_container_start.changed and pg_check_result.rc == 0
