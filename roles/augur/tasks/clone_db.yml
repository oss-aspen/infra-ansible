- name: test aws credentials
  ansible.builtin.include_role:
    name: aws
    tasks_from: check_saml

- name: "Find the facts for the '{{ mount_point }}' mount point"
  ansible.builtin.set_fact:
    # Use selectattr to find the specific mount and `first` to get it from the list
    mount_info: "{{ ansible_facts.mounts | selectattr('mount', 'equalto', mount_point) | first | default({}) }}"

- name: "Fail if available space is less than {{ required_free_space }}"
  ansible.builtin.fail:
    msg: >
      Insufficient free space on '{{ mount_point }}'.
      Required: {{ required_free_space }},
      Available: {{ mount_info.size_available | human_readable(unit='B', traditional=True) }}.
  when: mount_info.size_available < required_free_space | ansible.builtin.human_to_bytes
  vars:
    # --- Define your requirements here ---
    required_free_space: "500 GB"

- name: Tell PostgreSQL to make a checkpoint
  # Executes the pg_backup_start function inside the PostgreSQL container.
  # This prepares the database for a consistent filesystem-level backup (snapshot).
  community.docker.docker_container_exec:
    container: "{{ augur_pg_container_name }}"
    command: "psql -U {{ augur_pg_container_user }} -c \"CHECKPOINT;\""
    # The command is escaped correctly for shell execution within docker_container_exec.
    # It calls psql, connects as 'postgres' user, and executes the SQL function.
  environment:
    PGPASSWORD: "{{ augur_pg_password }}" # Pass the password securely via environment variable
  register: pg_checkpoint_result
  # Check for successful output from psql. pg_backup_start returns a text string.
  # failed_when: "'pg_backup_start' not in pg_backup_start_result.stdout"
  changed_when: true # This task changes the state of the database
  # Add a delay to ensure the command has time to execute and flush.
  # For pg_backup_start, the flush happens immediately, but a small delay
  # before the snapshot can be prudent.
  # This task should be executed *before* taking the EBS snapshot.


- name: Determine block device for {{ mount_point }}
  ansible.builtin.set_fact:
    mount_point_block: "{{ ansible_mounts | json_query(query) | first }}"
  vars:
    query: "[?mount=='{{ mount_point }}'].device"


- name: Identify aws volume mounted at location
  identify_volume:
    partition_device: "{{ mount_point_block }}"
  register: aws_vol
  # vars:
    # mount_point: "{{ mount_point }}"# this is already set in the role variables, but if its not it needs to be
# - debug:
#       msg: "volume: {{ aws_vol.aws_volume_id }}"

- name: Create snapshot of the source volume ({{ aws_vol.aws_volume_id }})
  # Creates a point-in-time snapshot of the specified EBS volume.
  amazon.aws.ec2_snapshot:
    volume_id: "{{ aws_vol.aws_volume_id }}"
    region: "{{ aws_region }}"
    description: "Snapshot for ansible 8knot data migration - {{ ansible_date_time.iso8601_basic }}"
    state: present
    profile: saml
    wait: false
    snapshot_tags:
      createdby: ansible
  register: snapshot_result # Stores the snapshot details for later use
  delegate_to: localhost # AWS API calls are typically delegated to localhost

- name: test aws credentials
  ansible.builtin.include_role:
    name: aws
    tasks_from: check_saml
  
- name: "Enable FSR for snapshot {{ snapshot_result.snapshot_id }} in AZ {{ aws_zone }}"
  ansible.builtin.command: >
    aws ec2 enable-fast-snapshot-restores
    --source-snapshot-ids {{ snapshot_result.snapshot_id }}
    --availability-zones {{ aws_zone }}
    --profile {{ aws_auth_profile }}
    --region {{ aws_region }}
  register: enable_fsr_result
  changed_when: "'enabling' in enable_fsr_result.stdout"

- name: "ℹ️  Display the result of the enable command"
  ansible.builtin.debug:
    var: enable_fsr_result.stdout

- name: "✅ Verify that the FSR enable command was successful"
  ansible.builtin.assert:
    that:
      # Check 1: Ensure the 'Unsuccessful' array is empty.
      - (enable_fsr_result.stdout | from_json).Unsuccessful | length == 0

      # Check 2: Ensure our snapshot ID is in the 'Successful' array.
      - snapshot_result.snapshot_id in ((enable_fsr_result.stdout | from_json).Successful | map(attribute='SnapshotId'))
    success_msg: "Successfully initiated FSR for snapshot {{ snapshot_result.snapshot_id }}."
    fail_msg: "Failed to initiate FSR for snapshot {{ snapshot_result.snapshot_id }}. Check the command output."
